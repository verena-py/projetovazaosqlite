# Generated by Django 3.2.7 on 2021-09-12 12:06

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Actionannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ActionAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Actionby',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('isactionlead', models.TextField(db_column='IsActionLead')),
                ('roledescription', models.CharField(blank=True, db_column='RoleDescription', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ActionBy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Actiondirectives',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ActionDirectives',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Actionextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'ActionExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('actionid', models.AutoField(db_column='ActionID', primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField(db_column='BeginDateTime')),
                ('begindatetimeutcoffset', models.IntegerField(db_column='BeginDateTimeUTCOffset')),
                ('enddatetime', models.DateTimeField(blank=True, db_column='EndDateTime', null=True)),
                ('enddatetimeutcoffset', models.IntegerField(blank=True, db_column='EndDateTimeUTCOffset', null=True)),
                ('actiondescription', models.CharField(blank=True, db_column='ActionDescription', max_length=120, null=True)),
                ('actionfilelink', models.CharField(blank=True, db_column='ActionFileLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Actions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Affiliations',
            fields=[
                ('affiliationid', models.AutoField(db_column='AffiliationID', primary_key=True, serialize=False)),
                ('isprimaryorganizationcontact', models.TextField(blank=True, db_column='IsPrimaryOrganizationContact', null=True)),
                ('affiliationstartdate', models.DateField(db_column='AffiliationStartDate')),
                ('affiliationenddate', models.DateField(blank=True, db_column='AffiliationEndDate', null=True)),
                ('primaryphone', models.CharField(blank=True, db_column='PrimaryPhone', max_length=120, null=True)),
                ('primaryemail', models.CharField(db_column='PrimaryEmail', max_length=120)),
                ('primaryaddress', models.CharField(blank=True, db_column='PrimaryAddress', max_length=120, null=True)),
                ('personlink', models.CharField(blank=True, db_column='PersonLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Affiliations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Annotations',
            fields=[
                ('annotationid', models.AutoField(db_column='AnnotationID', primary_key=True, serialize=False)),
                ('annotationcode', models.CharField(blank=True, db_column='AnnotationCode', max_length=120, null=True)),
                ('annotationtext', models.CharField(db_column='AnnotationText', max_length=120)),
                ('annotationdatetime', models.DateTimeField(blank=True, db_column='AnnotationDateTime', null=True)),
                ('annotationutcoffset', models.IntegerField(blank=True, db_column='AnnotationUTCOffset', null=True)),
                ('annotationlink', models.CharField(blank=True, db_column='AnnotationLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Annotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Authorlists',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('authororder', models.IntegerField(db_column='AuthorOrder')),
            ],
            options={
                'db_table': 'AuthorLists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('last_name', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calibrationreferenceequipment',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CalibrationReferenceEquipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calibrationstandards',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CalibrationStandards',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CategoricalResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.CharField(db_column='DataValue', max_length=120)),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
            ],
            options={
                'db_table': 'CategoricalResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Citationextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'CitationExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Citationexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('citationexternalidentifier', models.CharField(db_column='CitationExternalIdentifier', max_length=120)),
                ('citationexternalidentifieruri', models.CharField(blank=True, db_column='CitationExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CitationExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Citations',
            fields=[
                ('citationid', models.AutoField(db_column='CitationID', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=120)),
                ('publisher', models.CharField(db_column='Publisher', max_length=120)),
                ('publicationyear', models.IntegerField(db_column='PublicationYear')),
                ('citationlink', models.CharField(blank=True, db_column='CitationLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Citations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvActiontype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_ActionType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAggregationstatistic',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_AggregationStatistic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAnnotationtype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_AnnotationType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvCensorcode',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_CensorCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDataqualitytype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_DataQualityType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDatasettype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_DatasetType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDirectivetype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_DirectiveType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvElevationdatum',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_ElevationDatum',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvEquipmenttype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_EquipmentType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvMedium',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_Medium',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvMethodtype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_MethodType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvOrganizationtype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_OrganizationType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvPropertydatatype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_PropertyDataType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvQualitycode',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_QualityCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvRelationshiptype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_RelationshipType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvResulttype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_ResultType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturegeotype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_SamplingFeatureGeoType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturetype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_SamplingFeatureType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSitetype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_SiteType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpatialoffsettype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_SpatialOffsetType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpeciation',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_Speciation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimentype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_SpecimenType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvStatus',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_Status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvTaxonomicclassifiertype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_TaxonomicClassifierType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvUnitstype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_UnitsType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvVariablename',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_VariableName',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvVariabletype',
            fields=[
                ('term', models.CharField(db_column='Term', max_length=120)),
                ('name', models.CharField(db_column='Name', max_length=120, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=120, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, db_column='SourceVocabularyURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CV_VariableType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dataloggerfilecolumns',
            fields=[
                ('dataloggerfilecolumnid', models.AutoField(db_column='DataloggerFileColumnID', primary_key=True, serialize=False)),
                ('columnlabel', models.CharField(db_column='ColumnLabel', max_length=120)),
                ('columndescription', models.CharField(blank=True, db_column='ColumnDescription', max_length=120, null=True)),
                ('measurementequation', models.CharField(blank=True, db_column='MeasurementEquation', max_length=120, null=True)),
                ('scaninterval', models.TextField(blank=True, db_column='ScanInterval', null=True)),
                ('recordinginterval', models.TextField(blank=True, db_column='RecordingInterval', null=True)),
            ],
            options={
                'db_table': 'DataloggerFileColumns',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dataloggerfiles',
            fields=[
                ('dataloggerfileid', models.AutoField(db_column='DataLoggerFileID', primary_key=True, serialize=False)),
                ('dataloggerfilename', models.CharField(db_column='DataLoggerFileName', max_length=120)),
                ('dataloggerfiledescription', models.CharField(blank=True, db_column='DataLoggerFileDescription', max_length=120, null=True)),
                ('dataloggerfilelink', models.CharField(blank=True, db_column='DataLoggerFileLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'DataLoggerFiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dataloggerprogramfiles',
            fields=[
                ('programid', models.AutoField(db_column='ProgramID', primary_key=True, serialize=False)),
                ('programname', models.CharField(db_column='ProgramName', max_length=120)),
                ('programdescription', models.CharField(blank=True, db_column='ProgramDescription', max_length=120, null=True)),
                ('programversion', models.CharField(blank=True, db_column='ProgramVersion', max_length=120, null=True)),
                ('programfilelink', models.CharField(blank=True, db_column='ProgramFileLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'DataloggerProgramFiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dataquality',
            fields=[
                ('dataqualityid', models.AutoField(db_column='DataQualityID', primary_key=True, serialize=False)),
                ('dataqualitycode', models.CharField(db_column='DataQualityCode', max_length=120)),
                ('dataqualityvalue', models.TextField(blank=True, db_column='DataQualityValue', null=True)),
                ('dataqualitydescription', models.CharField(blank=True, db_column='DataQualityDescription', max_length=120, null=True)),
                ('dataqualitylink', models.CharField(blank=True, db_column='DataQualityLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'DataQuality',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Datasetcitations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'DatasetCitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Datasets',
            fields=[
                ('datasetid', models.AutoField(db_column='DatasetID', primary_key=True, serialize=False)),
                ('datasetuuid', models.CharField(db_column='DatasetUUID', max_length=120)),
                ('datasetcode', models.CharField(db_column='DatasetCode', max_length=120)),
                ('datasettitle', models.CharField(db_column='DatasetTitle', max_length=120)),
                ('datasetabstract', models.CharField(db_column='DatasetAbstract', max_length=120)),
            ],
            options={
                'db_table': 'Datasets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Datasetsresults',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'DatasetsResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Derivationequations',
            fields=[
                ('derivationequationid', models.AutoField(db_column='DerivationEquationID', primary_key=True, serialize=False)),
                ('derivationequation', models.CharField(db_column='DerivationEquation', max_length=120)),
            ],
            options={
                'db_table': 'DerivationEquations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Directives',
            fields=[
                ('directiveid', models.AutoField(db_column='DirectiveID', primary_key=True, serialize=False)),
                ('directivedescription', models.CharField(db_column='DirectiveDescription', max_length=120)),
            ],
            options={
                'db_table': 'Directives',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('change_message', models.TextField()),
                ('action_flag', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipmentid', models.AutoField(db_column='EquipmentID', primary_key=True, serialize=False)),
                ('equipmentcode', models.CharField(db_column='EquipmentCode', max_length=120)),
                ('equipmentname', models.CharField(db_column='EquipmentName', max_length=120)),
                ('equipmentserialnumber', models.CharField(db_column='EquipmentSerialNumber', max_length=120)),
                ('equipmentpurchasedate', models.DateTimeField(db_column='EquipmentPurchaseDate')),
                ('equipmentpurchaseordernumber', models.CharField(blank=True, db_column='EquipmentPurchaseOrderNumber', max_length=120, null=True)),
                ('equipmentdescription', models.CharField(blank=True, db_column='EquipmentDescription', max_length=120, null=True)),
                ('equipmentdocumentationlink', models.CharField(blank=True, db_column='EquipmentDocumentationLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Equipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Equipmentannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'EquipmentAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Equipmentmodels',
            fields=[
                ('equipmentmodelid', models.AutoField(db_column='EquipmentModelID', primary_key=True, serialize=False)),
                ('modelpartnumber', models.CharField(blank=True, db_column='ModelPartNumber', max_length=120, null=True)),
                ('modelname', models.CharField(db_column='ModelName', max_length=120)),
                ('modeldescription', models.CharField(blank=True, db_column='ModelDescription', max_length=120, null=True)),
                ('isinstrument', models.TextField(db_column='IsInstrument')),
                ('modelspecificationsfilelink', models.CharField(blank=True, db_column='ModelSpecificationsFileLink', max_length=120, null=True)),
                ('modellink', models.CharField(blank=True, db_column='ModelLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'EquipmentModels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Equipmentused',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'EquipmentUsed',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Extensionproperties',
            fields=[
                ('propertyid', models.AutoField(db_column='PropertyID', primary_key=True, serialize=False)),
                ('propertyname', models.CharField(db_column='PropertyName', max_length=120)),
                ('propertydescription', models.CharField(blank=True, db_column='PropertyDescription', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ExtensionProperties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Externalidentifiersystems',
            fields=[
                ('externalidentifiersystemid', models.AutoField(db_column='ExternalIdentifierSystemID', primary_key=True, serialize=False)),
                ('externalidentifiersystemname', models.CharField(db_column='ExternalIdentifierSystemName', max_length=120)),
                ('externalidentifiersystemdescription', models.CharField(blank=True, db_column='ExternalIdentifierSystemDescription', max_length=120, null=True)),
                ('externalidentifiersystemurl', models.CharField(blank=True, db_column='ExternalIdentifierSystemURL', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ExternalIdentifierSystems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Featureactions',
            fields=[
                ('featureactionid', models.AutoField(db_column='FeatureActionID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'FeatureActions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Instrumentoutputvariables',
            fields=[
                ('instrumentoutputvariableid', models.AutoField(db_column='InstrumentOutputVariableID', primary_key=True, serialize=False)),
                ('instrumentresolution', models.CharField(blank=True, db_column='InstrumentResolution', max_length=120, null=True)),
                ('instrumentaccuracy', models.CharField(blank=True, db_column='InstrumentAccuracy', max_length=120, null=True)),
            ],
            options={
                'db_table': 'InstrumentOutputVariables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurementresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'MeasurementResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurementresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
            ],
            options={
                'db_table': 'MeasurementResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Methodannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'MethodAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Methodcitations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'MethodCitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Methodextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'MethodExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Methodexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('methodexternalidentifier', models.CharField(db_column='MethodExternalIdentifier', max_length=120)),
                ('methodexternalidentifieruri', models.CharField(blank=True, db_column='MethodExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'MethodExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Methods',
            fields=[
                ('methodid', models.AutoField(db_column='MethodID', primary_key=True, serialize=False)),
                ('methodcode', models.CharField(db_column='MethodCode', max_length=120)),
                ('methodname', models.CharField(db_column='MethodName', max_length=120)),
                ('methoddescription', models.CharField(blank=True, db_column='MethodDescription', max_length=120, null=True)),
                ('methodlink', models.CharField(blank=True, db_column='MethodLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Methods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Modelaffiliations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('isprimary', models.TextField(db_column='IsPrimary')),
                ('roledescription', models.CharField(blank=True, db_column='RoleDescription', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ModelAffiliations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('modelid', models.AutoField(db_column='ModelID', primary_key=True, serialize=False)),
                ('modelcode', models.CharField(db_column='ModelCode', max_length=120)),
                ('modelname', models.CharField(db_column='ModelName', max_length=120)),
                ('modeldescription', models.CharField(blank=True, db_column='ModelDescription', max_length=120, null=True)),
                ('version', models.CharField(blank=True, db_column='Version', max_length=120, null=True)),
                ('modellink', models.CharField(blank=True, db_column='ModelLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Models',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('organizationid', models.AutoField(db_column='OrganizationID', primary_key=True, serialize=False)),
                ('organizationcode', models.CharField(db_column='OrganizationCode', max_length=120)),
                ('organizationname', models.CharField(db_column='OrganizationName', max_length=120)),
                ('organizationdescription', models.CharField(blank=True, db_column='OrganizationDescription', max_length=120, null=True)),
                ('organizationlink', models.CharField(blank=True, db_column='OrganizationLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Organizations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('personid', models.AutoField(db_column='PersonID', primary_key=True, serialize=False)),
                ('personfirstname', models.CharField(db_column='PersonFirstName', max_length=120)),
                ('personmiddlename', models.CharField(blank=True, db_column='PersonMiddleName', max_length=120, null=True)),
                ('personlastname', models.CharField(db_column='PersonLastName', max_length=120)),
            ],
            options={
                'db_table': 'People',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Personexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('personexternalidentifier', models.CharField(db_column='PersonExternalIdentifier', max_length=120)),
                ('personexternalidentifieruri', models.CharField(blank=True, db_column='PersonExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'PersonExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'PointCoverageResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('xlocation', models.TextField(db_column='XLocation')),
                ('ylocation', models.TextField(db_column='YLocation')),
            ],
            options={
                'db_table': 'PointCoverageResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Processinglevels',
            fields=[
                ('processinglevelid', models.AutoField(db_column='ProcessingLevelID', primary_key=True, serialize=False)),
                ('processinglevelcode', models.CharField(db_column='ProcessingLevelCode', max_length=120)),
                ('definition', models.CharField(blank=True, db_column='Definition', max_length=120, null=True)),
                ('explanation', models.CharField(blank=True, db_column='Explanation', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ProcessingLevels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profileresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ProfileResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profileresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('zlocation', models.TextField(db_column='ZLocation')),
                ('zaggregationinterval', models.TextField(db_column='ZAggregationInterval')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'ProfileResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Referencematerialexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('referencematerialexternalidentifier', models.CharField(db_column='ReferenceMaterialExternalIdentifier', max_length=120)),
                ('referencematerialexternalidentifieruri', models.CharField(blank=True, db_column='ReferenceMaterialExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ReferenceMaterialExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Referencematerials',
            fields=[
                ('referencematerialid', models.AutoField(db_column='ReferenceMaterialID', primary_key=True, serialize=False)),
                ('referencematerialcode', models.CharField(db_column='ReferenceMaterialCode', max_length=120)),
                ('referencemateriallotcode', models.CharField(blank=True, db_column='ReferenceMaterialLotCode', max_length=120, null=True)),
                ('referencematerialpurchasedate', models.DateTimeField(blank=True, db_column='ReferenceMaterialPurchaseDate', null=True)),
                ('referencematerialexpirationdate', models.DateTimeField(blank=True, db_column='ReferenceMaterialExpirationDate', null=True)),
                ('referencematerialcertificatelink', models.CharField(blank=True, db_column='ReferenceMaterialCertificateLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'ReferenceMaterials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Referencematerialvalues',
            fields=[
                ('referencematerialvalueid', models.AutoField(db_column='ReferenceMaterialValueID', primary_key=True, serialize=False)),
                ('referencematerialvalue', models.TextField(db_column='ReferenceMaterialValue')),
                ('referencematerialaccuracy', models.TextField(blank=True, db_column='ReferenceMaterialAccuracy', null=True)),
            ],
            options={
                'db_table': 'ReferenceMaterialValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedactions',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'RelatedActions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedannotations',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'RelatedAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedcitations',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'RelatedCitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relateddatasets',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
                ('versioncode', models.CharField(blank=True, db_column='VersionCode', max_length=120, null=True)),
            ],
            options={
                'db_table': 'RelatedDatasets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedequipment',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
                ('relationshipstartdatetime', models.DateTimeField(db_column='RelationshipStartDateTime')),
                ('relationshipstartdatetimeutcoffset', models.IntegerField(db_column='RelationshipStartDateTimeUTCOffset')),
                ('relationshipenddatetime', models.DateTimeField(blank=True, db_column='RelationshipEndDateTime', null=True)),
                ('relationshipenddatetimeutcoffset', models.IntegerField(blank=True, db_column='RelationshipEndDateTimeUTCOffset', null=True)),
            ],
            options={
                'db_table': 'RelatedEquipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedfeatures',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'RelatedFeatures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedmodels',
            fields=[
                ('relatedid', models.AutoField(db_column='RelatedID', primary_key=True, serialize=False)),
                ('relatedmodelid', models.IntegerField(db_column='RelatedModelID')),
            ],
            options={
                'db_table': 'RelatedModels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Relatedresults',
            fields=[
                ('relationid', models.AutoField(db_column='RelationID', primary_key=True, serialize=False)),
                ('versioncode', models.CharField(blank=True, db_column='VersionCode', max_length=120, null=True)),
                ('relatedresultsequencenumber', models.IntegerField(blank=True, db_column='RelatedResultSequenceNumber', null=True)),
            ],
            options={
                'db_table': 'RelatedResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resultannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField(db_column='BeginDateTime')),
                ('enddatetime', models.DateTimeField(db_column='EndDateTime')),
            ],
            options={
                'db_table': 'ResultAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resultextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'ResultExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('resultid', models.AutoField(db_column='ResultID', primary_key=True, serialize=False)),
                ('resultuuid', models.CharField(db_column='ResultUUID', max_length=120)),
                ('resultdatetime', models.DateTimeField(blank=True, db_column='ResultDateTime', null=True)),
                ('resultdatetimeutcoffset', models.IntegerField(blank=True, db_column='ResultDateTimeUTCOffset', null=True)),
                ('validdatetime', models.DateTimeField(blank=True, db_column='ValidDateTime', null=True)),
                ('validdatetimeutcoffset', models.IntegerField(blank=True, db_column='ValidDateTimeUTCOffset', null=True)),
                ('valuecount', models.IntegerField(db_column='ValueCount')),
            ],
            options={
                'db_table': 'Results',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resultsdataquality',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ResultsDataQuality',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'SamplingFeatureAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'SamplingFeatureExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('samplingfeatureexternalidentifier', models.CharField(db_column='SamplingFeatureExternalIdentifier', max_length=120)),
                ('samplingfeatureexternalidentifieruri', models.CharField(blank=True, db_column='SamplingFeatureExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'SamplingFeatureExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatures',
            fields=[
                ('samplingfeatureid', models.AutoField(db_column='SamplingFeatureID', primary_key=True, serialize=False)),
                ('samplingfeatureuuid', models.CharField(db_column='SamplingFeatureUUID', max_length=120)),
                ('samplingfeaturecode', models.CharField(db_column='SamplingFeatureCode', max_length=120)),
                ('samplingfeaturename', models.CharField(blank=True, db_column='SamplingFeatureName', max_length=120, null=True)),
                ('samplingfeaturedescription', models.CharField(blank=True, db_column='SamplingFeatureDescription', max_length=120, null=True)),
                ('featuregeometry', models.TextField(blank=True, db_column='FeatureGeometry', null=True)),
                ('featuregeometrywkt', models.CharField(blank=True, db_column='FeatureGeometryWKT', max_length=120, null=True)),
                ('elevation_m', models.TextField(blank=True, db_column='Elevation_m', null=True)),
            ],
            options={
                'db_table': 'SamplingFeatures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sectionresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'SectionResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sectionresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('xlocation', models.TextField(db_column='XLocation')),
                ('xaggregationinterval', models.TextField(db_column='XAggregationInterval')),
                ('zlocation', models.IntegerField(db_column='ZLocation')),
                ('zaggregationinterval', models.TextField(db_column='ZAggregationInterval')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'SectionResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Simulations',
            fields=[
                ('simulationid', models.AutoField(db_column='SimulationID', primary_key=True, serialize=False)),
                ('simulationname', models.CharField(db_column='SimulationName', max_length=120)),
                ('simulationdescription', models.CharField(blank=True, db_column='SimulationDescription', max_length=120, null=True)),
                ('simulationstartdatetime', models.DateTimeField(db_column='SimulationStartDateTime')),
                ('simulationstartdatetimeutcoffset', models.IntegerField(db_column='SimulationStartDateTimeUTCOffset')),
                ('simulationenddatetime', models.DateTimeField(db_column='SimulationEndDateTime')),
                ('simulationenddatetimeutcoffset', models.IntegerField(db_column='SimulationEndDateTimeUTCOffset')),
                ('timestepvalue', models.TextField(db_column='TimeStepValue')),
                ('timestepunitsid', models.IntegerField(db_column='TimeStepUnitsID')),
                ('inputdatasetid', models.IntegerField(blank=True, db_column='InputDataSetID', null=True)),
            ],
            options={
                'db_table': 'Simulations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spatialoffsets',
            fields=[
                ('spatialoffsetid', models.AutoField(db_column='SpatialOffsetID', primary_key=True, serialize=False)),
                ('offset1value', models.TextField(db_column='Offset1Value')),
                ('offset2value', models.TextField(blank=True, db_column='Offset2Value', null=True)),
                ('offset3value', models.TextField(blank=True, db_column='Offset3Value', null=True)),
            ],
            options={
                'db_table': 'SpatialOffsets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spatialreferenceexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('spatialreferenceexternalidentifier', models.CharField(db_column='SpatialReferenceExternalIdentifier', max_length=120)),
                ('spatialreferenceexternalidentifieruri', models.CharField(blank=True, db_column='SpatialReferenceExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'SpatialReferenceExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spatialreferences',
            fields=[
                ('spatialreferenceid', models.AutoField(db_column='SpatialReferenceID', primary_key=True, serialize=False)),
                ('srscode', models.CharField(blank=True, db_column='SRSCode', max_length=120, null=True)),
                ('srsname', models.CharField(db_column='SRSName', max_length=120)),
                ('srsdescription', models.CharField(blank=True, db_column='SRSDescription', max_length=120, null=True)),
                ('srslink', models.CharField(blank=True, db_column='SRSLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'SpatialReferences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimentaxonomicclassifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'SpecimenTaxonomicClassifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spectraresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'SpectraResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spectraresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('excitationwavelength', models.TextField(db_column='ExcitationWavelength')),
                ('emissionwavelength', models.TextField(db_column='EmissionWavelength')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'SpectraResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxonomicclassifierexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('taxonomicclassifierexternalidentifier', models.CharField(db_column='TaxonomicClassifierExternalIdentifier', max_length=120)),
                ('taxonomicclassifierexternalidentifieruri', models.CharField(blank=True, db_column='TaxonomicClassifierExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'TaxonomicClassifierExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxonomicclassifiers',
            fields=[
                ('taxonomicclassifierid', models.AutoField(db_column='TaxonomicClassifierID', primary_key=True, serialize=False)),
                ('taxonomicclassifiername', models.CharField(db_column='TaxonomicClassifierName', max_length=120)),
                ('taxonomicclassifiercommonname', models.CharField(blank=True, db_column='TaxonomicClassifierCommonName', max_length=120, null=True)),
                ('taxonomicclassifierdescription', models.CharField(blank=True, db_column='TaxonomicClassifierDescription', max_length=120, null=True)),
            ],
            options={
                'db_table': 'TaxonomicClassifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'TimeSeriesResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'TimeSeriesResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'TrajectoryResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('xlocation', models.TextField(db_column='XLocation')),
                ('ylocation', models.TextField(db_column='YLocation')),
                ('zlocation', models.TextField(db_column='ZLocation')),
                ('trajectorydistance', models.TextField(db_column='TrajectoryDistance')),
                ('trajectorydistanceaggregationinterval', models.TextField(db_column='TrajectoryDistanceAggregationInterval')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'TrajectoryResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transectresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'TransectResultValueAnnotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transectresultvalues',
            fields=[
                ('valueid', models.AutoField(db_column='ValueID', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='DataValue')),
                ('valuedatetime', models.DateTimeField(db_column='ValueDateTime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='ValueDateTimeUTCOffset')),
                ('xlocation', models.TextField(db_column='XLocation')),
                ('ylocation', models.TextField(db_column='YLocation')),
                ('transectdistance', models.TextField(db_column='TransectDistance')),
                ('transectdistanceaggregationinterval', models.TextField(db_column='TransectDistanceAggregationInterval')),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'TransectResultValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('unitsid', models.AutoField(db_column='UnitsID', primary_key=True, serialize=False)),
                ('unitsabbreviation', models.CharField(db_column='UnitsAbbreviation', max_length=120)),
                ('unitsname', models.CharField(db_column='UnitsName', max_length=120)),
                ('unitslink', models.CharField(blank=True, db_column='UnitsLink', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Units',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variableextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(db_column='PropertyValue', max_length=120)),
            ],
            options={
                'db_table': 'VariableExtensionPropertyValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variableexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(db_column='BridgeID', primary_key=True, serialize=False)),
                ('variableexternalidentifer', models.CharField(db_column='VariableExternalIdentifer', max_length=120)),
                ('variableexternalidentifieruri', models.CharField(blank=True, db_column='VariableExternalIdentifierURI', max_length=120, null=True)),
            ],
            options={
                'db_table': 'VariableExternalIdentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('variableid', models.AutoField(db_column='VariableID', primary_key=True, serialize=False)),
                ('variablecode', models.CharField(db_column='VariableCode', max_length=120)),
                ('variabledefinition', models.CharField(blank=True, db_column='VariableDefinition', max_length=120, null=True)),
                ('nodatavalue', models.TextField(db_column='NoDataValue')),
            ],
            options={
                'db_table': 'Variables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calibrationactions',
            fields=[
                ('actionid', models.OneToOneField(db_column='ActionID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.actions')),
                ('calibrationcheckvalue', models.TextField(blank=True, db_column='CalibrationCheckValue', null=True)),
                ('calibrationequation', models.CharField(blank=True, db_column='CalibrationEquation', max_length=120, null=True)),
            ],
            options={
                'db_table': 'CalibrationActions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('xlocation', models.TextField(blank=True, db_column='XLocation', null=True)),
                ('xlocationunitsid', models.IntegerField(blank=True, db_column='XLocationUnitsID', null=True)),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('ylocationunitsid', models.IntegerField(blank=True, db_column='YLocationUnitsID', null=True)),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('zlocationunitsid', models.IntegerField(blank=True, db_column='ZLocationUnitsID', null=True)),
            ],
            options={
                'db_table': 'CategoricalResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maintenanceactions',
            fields=[
                ('actionid', models.OneToOneField(db_column='ActionID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.actions')),
                ('isfactoryservice', models.TextField(db_column='IsFactoryService')),
                ('maintenancecode', models.CharField(blank=True, db_column='MaintenanceCode', max_length=120, null=True)),
                ('maintenancereason', models.CharField(blank=True, db_column='MaintenanceReason', max_length=120, null=True)),
            ],
            options={
                'db_table': 'MaintenanceActions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurementresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('xlocation', models.TextField(blank=True, db_column='XLocation', null=True)),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
            ],
            options={
                'db_table': 'MeasurementResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('intendedxspacing', models.TextField(blank=True, db_column='IntendedXSpacing', null=True)),
                ('intendedyspacing', models.TextField(blank=True, db_column='IntendedYSpacing', null=True)),
                ('timeaggregationinterval', models.TextField(db_column='TimeAggregationInterval')),
                ('timeaggregationintervalunitsid', models.IntegerField(db_column='TimeAggregationIntervalUnitsID')),
            ],
            options={
                'db_table': 'PointCoverageResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profileresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('xlocation', models.TextField(blank=True, db_column='XLocation', null=True)),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('intendedzspacing', models.TextField(blank=True, db_column='IntendedZSpacing', null=True)),
                ('intendedtimespacing', models.TextField(blank=True, db_column='IntendedTimeSpacing', null=True)),
            ],
            options={
                'db_table': 'ProfileResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resultderivationequations',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
            ],
            options={
                'db_table': 'ResultDerivationEquations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resultnormalizationvalues',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
            ],
            options={
                'db_table': 'ResultNormalizationValues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sectionresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('intendedxspacing', models.TextField(blank=True, db_column='IntendedXSpacing', null=True)),
                ('intendedzspacing', models.TextField(blank=True, db_column='IntendedZSpacing', null=True)),
                ('intendedtimespacing', models.TextField(blank=True, db_column='IntendedTimeSpacing', null=True)),
            ],
            options={
                'db_table': 'SectionResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='SamplingFeatureID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.samplingfeatures')),
                ('latitude', models.TextField(db_column='Latitude')),
                ('longitude', models.TextField(db_column='Longitude')),
            ],
            options={
                'db_table': 'Sites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimenbatchpostions',
            fields=[
                ('featureactionid', models.OneToOneField(db_column='FeatureActionID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.featureactions')),
                ('batchpositionnumber', models.IntegerField(db_column='BatchPositionNumber')),
                ('batchpositionlabel', models.CharField(blank=True, db_column='BatchPositionLabel', max_length=120, null=True)),
            ],
            options={
                'db_table': 'SpecimenBatchPostions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimens',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='SamplingFeatureID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.samplingfeatures')),
                ('isfieldspecimen', models.TextField(db_column='IsFieldSpecimen')),
            ],
            options={
                'db_table': 'Specimens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Spectraresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('xlocation', models.TextField(blank=True, db_column='XLocation', null=True)),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('intendedwavelengthspacing', models.TextField(blank=True, db_column='IntendedWavelengthSpacing', null=True)),
            ],
            options={
                'db_table': 'SpectraResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('xlocation', models.TextField(blank=True, db_column='XLocation', null=True)),
                ('ylocation', models.TextField(blank=True, db_column='YLocation', null=True)),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('intendedtimespacing', models.TextField(blank=True, db_column='IntendedTimeSpacing', null=True)),
            ],
            options={
                'db_table': 'TimeSeriesResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('intendedtrajectoryspacing', models.TextField(blank=True, db_column='IntendedTrajectorySpacing', null=True)),
                ('intendedtimespacing', models.TextField(blank=True, db_column='IntendedTimeSpacing', null=True)),
            ],
            options={
                'db_table': 'TrajectoryResults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transectresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='ResultID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='odm2.results')),
                ('zlocation', models.TextField(blank=True, db_column='ZLocation', null=True)),
                ('intendedtransectspacing', models.TextField(blank=True, db_column='IntendedTransectSpacing', null=True)),
                ('intendedtimespacing', models.TextField(blank=True, db_column='IntendedTimeSpacing', null=True)),
            ],
            options={
                'db_table': 'TransectResults',
                'managed': False,
            },
        ),
    ]
